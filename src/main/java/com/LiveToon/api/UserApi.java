/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.16.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.LiveToon.api;

import com.LiveToon.domain.user.entity.User;
import com.LiveToon.model.Achievement;
import com.LiveToon.model.Error;
import org.springframework.lang.Nullable;
import java.util.UUID;

import com.LiveToon.model.UserAchievementsGet200Response;
import com.LiveToon.model.UserAchievementsIdPatchRequest;
import com.LiveToon.model.UserSettingsGet200Response;
import com.LiveToon.model.UserSettingsPatch200Response;
import com.LiveToon.model.UserSettingsPatchRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-29T19:10:41.347886+09:00[Asia/Seoul]", comments = "Generator version: 7.16.0")
@Validated
@Tag(name = "Achievement", description = "the Achievement API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    public static final String PATH_USER_ACHIEVEMENTS_GET = "/user/achievements";
    /**
     * GET /user/achievements : �꾩쟾怨쇱젣 由ъ뒪�� &amp; 吏꾪뻾�� 議고쉶
     * �ъ슜�먯쓽 �꾩쟾怨쇱젣 紐⑸줉怨� 吏꾪뻾 �곹솴�� 議고쉶�⑸땲��
     *
     * @param category �꾩쟾怨쇱젣 移댄뀒怨좊━ �꾪꽣 (optional)
     * @param status �꾩쟾怨쇱젣 �곹깭 �꾪꽣 (optional)
     * @return �꾩쟾怨쇱젣 紐⑸줉 議고쉶 �깃났 (status code 200)
     *         or �몄쬆�섏� �딆� �ъ슜�� (status code 401)
     */
    @Operation(
        operationId = "userAchievementsGet",
        summary = "�꾩쟾怨쇱젣 由ъ뒪�� & 吏꾪뻾�� 議고쉶",
        description = "�ъ슜�먯쓽 �꾩쟾怨쇱젣 紐⑸줉怨� 吏꾪뻾 �곹솴�� 議고쉶�⑸땲��",
        tags = { "Achievement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "�꾩쟾怨쇱젣 紐⑸줉 議고쉶 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserAchievementsGet200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "�몄쬆�섏� �딆� �ъ슜��", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = UserApi.PATH_USER_ACHIEVEMENTS_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserAchievementsGet200Response> userAchievementsGet(
        @Parameter(name = "category", description = "�꾩쟾怨쇱젣 移댄뀒怨좊━ �꾪꽣", in = ParameterIn.QUERY) @Valid @RequestParam(value = "category", required = false) @Nullable String category,
        @Parameter(name = "status", description = "�꾩쟾怨쇱젣 �곹깭 �꾪꽣", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) @Nullable String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"total_completed\" : 0, \"achievements\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"progress\" : 8, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"category\" : \"category\", \"unlocked_at\" : \"2000-01-23T04:56:07.000+00:00\", \"is_completed\" : true }, { \"name\" : \"name\", \"description\" : \"description\", \"progress\" : 8, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"category\" : \"category\", \"unlocked_at\" : \"2000-01-23T04:56:07.000+00:00\", \"is_completed\" : true } ], \"total_available\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_USER_ACHIEVEMENTS_ID_PATCH = "/user/achievements/{id}";
    /**
     * PATCH /user/achievements/{id} : �꾩쟾怨쇱젣 �낅뜲�댄듃
     * �뱀젙 �꾩쟾怨쇱젣�� 吏꾪뻾 �곹솴�� �낅뜲�댄듃�⑸땲��
     *
     * @param id �꾩쟾怨쇱젣 ID (required)
     * @param userAchievementsIdPatchRequest  (required)
     * @return �꾩쟾怨쇱젣 �낅뜲�댄듃 �깃났 (status code 200)
     *         or �섎せ�� �붿껌 (status code 400)
     *         or �꾩쟾怨쇱젣瑜� 李얠쓣 �� �놁쓬 (status code 404)
     */
    @Operation(
        operationId = "userAchievementsIdPatch",
        summary = "�꾩쟾怨쇱젣 �낅뜲�댄듃",
        description = "�뱀젙 �꾩쟾怨쇱젣�� 吏꾪뻾 �곹솴�� �낅뜲�댄듃�⑸땲��",
        tags = { "Achievement" },
        responses = {
            @ApiResponse(responseCode = "200", description = "�꾩쟾怨쇱젣 �낅뜲�댄듃 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Achievement.class))
            }),
            @ApiResponse(responseCode = "400", description = "�섎せ�� �붿껌", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "�꾩쟾怨쇱젣瑜� 李얠쓣 �� �놁쓬", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = UserApi.PATH_USER_ACHIEVEMENTS_ID_PATCH,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Achievement> userAchievementsIdPatch(
        @NotNull @Parameter(name = "id", description = "�꾩쟾怨쇱젣 ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UserAchievementsIdPatchRequest", description = "", required = true) @Valid @RequestBody UserAchievementsIdPatchRequest userAchievementsIdPatchRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"description\" : \"description\", \"progress\" : 8, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"category\" : \"category\", \"unlocked_at\" : \"2000-01-23T04:56:07.000+00:00\", \"is_completed\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_USER_ME_GET = "/user/me";
    /**
     * GET /user/me : �� �뺣낫 議고쉶
     * �꾩옱 濡쒓렇�명븳 �ъ슜�먯쓽 �뺣낫瑜� 議고쉶�⑸땲��
     *
     * @return �ъ슜�� �뺣낫 議고쉶 �깃났 (status code 200)
     *         or �몄쬆�섏� �딆� �ъ슜�� (status code 401)
     */
    @Operation(
        operationId = "userMeGet",
        summary = "�� �뺣낫 議고쉶",
        description = "�꾩옱 濡쒓렇�명븳 �ъ슜�먯쓽 �뺣낫瑜� 議고쉶�⑸땲��",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "�ъ슜�� �뺣낫 議고쉶 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "�몄쬆�섏� �딆� �ъ슜��", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = UserApi.PATH_USER_ME_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> userMeGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"subscription_tier\" : \"free\", \"is_active\" : true, \"avatar_url\" : \"https://openapi-generator.tech\", \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"nickname\" : \"nickname\", \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_USER_SETTINGS_GET = "/user/settings";
    /**
     * GET /user/settings : �좎� �ㅼ젙 議고쉶
     * �ъ슜�먯쓽 媛쒖씤 �ㅼ젙�� 議고쉶�⑸땲��
     *
     * @return �ㅼ젙 議고쉶 �깃났 (status code 200)
     *         or �몄쬆�섏� �딆� �ъ슜�� (status code 401)
     */
    @Operation(
        operationId = "userSettingsGet",
        summary = "�좎� �ㅼ젙 議고쉶",
        description = "�ъ슜�먯쓽 媛쒖씤 �ㅼ젙�� 議고쉶�⑸땲��",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "�ㅼ젙 議고쉶 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSettingsGet200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "�몄쬆�섏� �딆� �ъ슜��", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = UserApi.PATH_USER_SETTINGS_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserSettingsGet200Response> userSettingsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"privacy\" : { \"story_sharing\" : true, \"profile_visibility\" : \"public\" }, \"theme\" : \"light\", \"language\" : \"ko\", \"story_preferences\" : { \"auto_save\" : true, \"image_quality\" : \"low\" }, \"notifications\" : { \"story_updates\" : true, \"email\" : true, \"push\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    public static final String PATH_USER_SETTINGS_PATCH = "/user/settings";
    /**
     * PATCH /user/settings : �좎� �ㅼ젙 蹂�寃�
     * �ъ슜�먯쓽 媛쒖씤 �ㅼ젙�� 蹂�寃쏀빀�덈떎
     *
     * @param userSettingsPatchRequest  (required)
     * @return �ㅼ젙 �낅뜲�댄듃 �깃났 (status code 200)
     *         or �섎せ�� �붿껌 (status code 400)
     *         or �몄쬆�섏� �딆� �ъ슜�� (status code 401)
     */
    @Operation(
        operationId = "userSettingsPatch",
        summary = "�좎� �ㅼ젙 蹂�寃�",
        description = "�ъ슜�먯쓽 媛쒖씤 �ㅼ젙�� 蹂�寃쏀빀�덈떎",
        tags = { "User" },
        responses = {
            @ApiResponse(responseCode = "200", description = "�ㅼ젙 �낅뜲�댄듃 �깃났", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserSettingsPatch200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "�섎せ�� �붿껌", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "�몄쬆�섏� �딆� �ъ슜��", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = UserApi.PATH_USER_SETTINGS_PATCH,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserSettingsPatch200Response> userSettingsPatch(
        @Parameter(name = "UserSettingsPatchRequest", description = "", required = true) @Valid @RequestBody UserSettingsPatchRequest userSettingsPatchRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"settings\" : \"{}\", \"message\" : \"�ㅼ젙�� �깃났�곸쑝濡� �낅뜲�댄듃�섏뿀�듬땲��\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"{}\", \"error\" : \"error\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
